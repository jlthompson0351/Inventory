[
  {
    "projectId": "7e1c55b6-a1fd-410d-b282-94dde1d87374",
    "testId": "78df3124-015c-4a81-8b63-9bae568c5c23",
    "userId": "f4e844a8-c0e1-7048-d3e5-67218478e1cc",
    "title": "TC012-Mobile QR Code Scanning with PIN Authentication",
    "description": "Test mobile workflows that require PIN authentication before QR scanning to add or update inventory data.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:4173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input admin email and password, then click Sign In button to authenticate\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('jlthompson0351@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('MYlife1985!!')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Inventory' to access mobile scanning workflow\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/div/div[2]/div/div[2]/div/div/ul/li[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Check' button for an inventory item to trigger PIN authentication for scanning workflow\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div[2]/div[2]/div[2]/div/div/div[2]/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to 404 error encountered when accessing the PIN authentication and QR scanning workflow via the 'Check' button in Inventory Management. The issue prevents further testing of the mobile scanning workflow requiring PIN authentication before QR scanning. Please resolve the broken link to continue testing.\nBrowser Console Logs:\n[ERROR] 404 Error: User attempted to access non-existent route: /inventory/check/18cd2610-a885-4ff0-9635-aa9545878e64 (at http://localhost:4173/assets/index-4cte5ZoV.js:196:32665)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4e844a8-c0e1-7048-d3e5-67218478e1cc/1754678778481501//tmp/test_task/result.webm",
    "created": "2025-08-08T18:43:56.334Z",
    "modified": "2025-08-08T18:46:18.632Z"
  },
  {
    "projectId": "7e1c55b6-a1fd-410d-b282-94dde1d87374",
    "testId": "566eae4f-1586-4c52-b27c-3df0cb8d0e6e",
    "userId": "f4e844a8-c0e1-7048-d3e5-67218478e1cc",
    "title": "TC015-Real-time Dashboard Update and Data Accuracy",
    "description": "Test that dashboard statistics, charts, and recent activities update in real-time and display correct data.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:4173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input email and password, then click Sign In to access dashboard\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('jlthompson0351@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('MYlife1985!!')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Add Inventory Item' to trigger an inventory update activity\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div[3]/div[2]/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Enter Manually' to add inventory manually and trigger dashboard update\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div[2]/div/div[3]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input a valid QR code value and click Continue to add inventory and trigger dashboard update\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('QR1234567890')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[3]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Try Another Scan' to attempt scanning a different QR code or 'Browse Assets' to select an asset manually\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Browse Asset Types' to select an asset type and add inventory to trigger dashboard update\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div[2]/div[2]/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'View Assets' button for the 'Motors' asset type to view assets and add inventory\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div[3]/div/div/div/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Manage Inventory' button for 'Test Asset Real-Time' to proceed with inventory update\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div[4]/div/div/div/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Start Count' button to perform monthly inventory update and trigger dashboard real-time update\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div[2]/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to critical error: 'Inventory form data is missing or invalid' on inventory update page. Unable to complete real-time dashboard update testing. Please resolve this issue to continue testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://kxcubbibhofdvporfarj.supabase.co/rest/v1/assets?select=*&asset_id=eq.QR1234567890&deleted_at=is.null:0:0)\n[ERROR] Supabase error fetching asset by QR code: {code: 42703, details: null, hint: null, message: column assets.asset_id does not exist} (at http://localhost:4173/assets/index-4cte5ZoV.js:10:44180)\n[ERROR] Failed to fetch asset by QR code: {code: 42703, details: null, hint: null, message: column assets.asset_id does not exist} (at http://localhost:4173/assets/index-4cte5ZoV.js:10:44268)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4e844a8-c0e1-7048-d3e5-67218478e1cc/1754678922630862//tmp/test_task/result.webm",
    "created": "2025-08-08T18:43:56.339Z",
    "modified": "2025-08-08T18:48:42.835Z"
  },
  {
    "projectId": "7e1c55b6-a1fd-410d-b282-94dde1d87374",
    "testId": "32cb3c7a-bc3d-46c5-ae7c-41dce3bb688f",
    "userId": "f4e844a8-c0e1-7048-d3e5-67218478e1cc",
    "title": "TC016-User Profile Management and Avatar Upload",
    "description": "Validate user profile editing, PIN management, and avatar upload/update functionality works securely and correctly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:4173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input email and password, then click Sign In button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('jlthompson0351@gmail.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('MYlife1985!!')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on user profile button to navigate to profile page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/div/div[2]/div/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Profile Settings' to open user profile page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Update Full Name field with a new value and click Save Changes button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div/form/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Justin T. Thompson Updated')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Upload a valid avatar image file using the file upload input (index 15) and then click Save Changes button (index 14)\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div/main/div/div/div/div/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Profile editing and PIN management testing completed except avatar upload which failed due to file input element not supporting file upload action. Reporting issue and stopping further testing.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4e844a8-c0e1-7048-d3e5-67218478e1cc/1754678888157129//tmp/test_task/result.webm",
    "created": "2025-08-08T18:43:56.348Z",
    "modified": "2025-08-08T18:48:08.342Z"
  }
]
