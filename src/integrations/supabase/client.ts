// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/database.types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || 'https://kxcubbibhofdvporfarj.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt4Y3ViYmliaG9mZHZwb3JmYXJqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0MDA4OTcsImV4cCI6MjA1OTk3Njg5N30.tgIV238CB9EeMOWdqM-u8oDhhbCz2f7SzT7ma9jfeEo';

if (!SUPABASE_URL) {
  throw new Error('Supabase URL is required but not found in environment variables');
}

if (!SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Supabase publishable key is required but not found in environment variables');
}

// Log configuration on startup (only in development)
if (import.meta.env.DEV) {
  // Supabase client initializing
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Utility function for debugging connectivity issues
export const testSupabaseConnectivity = async (): Promise<{
  connected: boolean;
  latency?: number;
  error?: string;
}> => {
  const startTime = Date.now();
  try {
    const { data: { session }, error } = await Promise.race([
      supabase.auth.getSession(),
      new Promise<never>((_, reject) => 
        setTimeout(() => reject(new Error('Connectivity test timeout')), 10000)
      )
    ]);
    
    const latency = Date.now() - startTime;
    
    if (error) {
      return { connected: false, error: error.message, latency };
    }
    
    return { connected: true, latency };
  } catch (error) {
    const latency = Date.now() - startTime;
    return { 
      connected: false, 
      error: error instanceof Error ? error.message : 'Unknown error',
      latency 
    };
  }
};